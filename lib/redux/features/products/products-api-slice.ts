// Need to use the React-specific entry point to import `createApi`
import { createClient } from "@/lib/supabase/client";
import { createApi, fakeBaseQuery } from "@reduxjs/toolkit/query/react";

const supabase = createClient();
interface Product {
  id: number;
  name: string;
  author: string;
}

interface ProductsApiResponse {
  products: Product[];
  total: number;
  skip: number;
  limit: number;
}

// Define a service using a base URL and expected endpoints
export const productsApiSlice = createApi({
  baseQuery: fakeBaseQuery(),
  reducerPath: "productsApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Products"],
  endpoints: (builder) => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getProducts: builder.query({
      queryFn: async () => {
        const { data, error } = await supabase
          .from("products")
          .select("id, name")
          .eq("done", false);
        if (error) {
          throw { error };
        }
        return { data };
      },
      // `providesTags` determines which 'tag' is attached to the
      // // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "Products", id }],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetProductsQuery } = productsApiSlice;
